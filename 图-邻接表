//邻接表：
#include<iostream>
#include<queue>
using namespace std;
#define MAXSIZE 100
//边结点
typedef struct ArcNode{
 int adjvex;
 int w;//非网可以省略
 struct ArcNode * next;
}ArcNode;
//邻接表
typedef struct VexNode{
 int data;
 ArcNode * firstarc;
}VexNode,AdjList[MAXSIZE];
//图结构
typedef struct{
 AdjList L;
 int arcnum;
 int vexnum;
}Graph;

void CreateGraph(Graph &G){
  int i,j,k;
  ArcNode * e;
  cin>>G.vexnum>>G.arcnum;
  //1)顺序表部分：
  for(i=1;i<=G.vexnum;i++){
   cin>>G.L[i].data;
   G.L[i].firstarc=NULL;
  }
  //2)链表部分：
  for(k=0;k<G.arcnum;k++){
   cin>>i>>j;
   e = new ArcNode();
   e->adjvex = j;
   e->next = G.L[i].firstarc;//头插法
   G.L[i].firstarc = e;      //头插法
   //无向图还需要加下面的：
   e = new ArcNode();
   e->adjvex = i;
   e->next = G.L[j].firstarc;//头插法
   G.L[j].firstarc = e;      //头插法
  }
}

//邻接表DFS：
int visited[MAXSIZE] = {0};

void DFS(Graph G,int i){
 ArcNode *p;//用来指向边结点
 visited[i] = 1;
 cout<<G.L[i].data;//或者进行其他操作
 p = G.L[i].firstarc;
 while(p){
  if(!visited[p->adjvex])
   DFS(G,p->adjvex);
  p = p->next;
 }
}

//邻接表BFS：
void BFS(Graph G){
 int i;
 ArcNode *p;
 queue<int> Q;
 for(i=0;i<G.vexnum;i++)
  visited[i]=0;
 for(i=0;i<G.vexnum;i++){
  if(visited[i] == 0){
   visited[i]=1;
   cout<<G.L[i].data;
   Q.push(i);
   while(!Q.empty()){
    Q.pop();
    //找到当前顶点的头指针
    p = G.L[i].firstarc;
    while(p){
     if(visited[p->adjvex]==0){
      visited[p->adjvex] = 1;
      cout<<G.L[p->adjvex].data;
      Q.push(p->adjvex);
     }
     p = p->next;
    }
   }
  }
 }
}
