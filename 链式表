/*
*链式表：
表的实现     SqList
表的初始化   InitList
表的创建     CreateList
插入元素	 InsertElem
删除元素     DeleteElem
查找次序元素 GetElem
查找目标元素 LocateElem
清空表       ClearList
返回元素个数 ListLength
是否为空表   ListEmpty
*/
#include<iostream>
using namespace std;

#define MAXSIZE 20
typedef int ElemType;
typedef int Status;

typedef struct LNode
{
	ElemType data;
	struct LNode * next;
}LNode,* LinkList;

Status InitList(LinkList &L)
{
	L = new LNode;
	L->next = NULL;
	return 1;
}

void CreateListTail(LinkList &L,int n)//尾插法
{
	L = new LNode;             //head node
	L->next = NULL;
	for(int i=0;i<n;i++)
	{
		LinkList p = new LNode; 
		cin>>p->data;          //输入数据
		p->next = L->next;
		L->next = p;
	}
}

Status InsertElem(LinkList &L,int i,ElemType e)  //i:1--end+1
{
	LinkList p,q;
	p = L;
	int j=1;
	while(p && j<i) //j到i前一个元素停止
	{
		p = p->next;
		j++;
	}
	if(!p || j>i)
		return -1;
	q = new LNode;      //q存待插入元素
	q->data = e;
	q->next = p->next;  //后接q
	p->next = q;        //前接q
	return 1;
}

Status DeleteElem(LinkList &L,int i,ElemType *e)
{
	LinkList p,q;
	p = L;
	int j=1;
	while(p->next && j<i)  //p->next:优化；i次序不存在不会ERROR
	{
		p = p->next;
		j++;
	}
	if(!(p->next) || j>i)
		return -1;
	q = p->next;
	p->next = q->next; //前连后，绕过q
	*e = q->data;      //指针e存储删除数据
	delete(q);
	q = NULL;
	return 1;
}

Status GetElem(LinkList L,int i,ElemType *e)
{
	if(i<1)
		return -1;   //-1 ERROR  

	int j=1;
	LinkList p;
	p = L->next;     //D1 node
	while(p && j<i)  //只有p为空&&j=i时，退出
	{
		p = p->next;
		j++;
	}

	if(!p)
		return -1;  //j
	*e = p->data;   //传入进来的e指针存储目标元素值
	return 1;
}

Status ClearList(LinkList &L)
{
	LinkList p,q;
	p = L->next;  //D1 node
	while(p)
	{
		q = p->next; //q = next node
		free(p);
		p = q;
	}
	L->next = NULL;
	return 1;
}
